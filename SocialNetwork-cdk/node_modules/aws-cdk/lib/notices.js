"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoticeFilter = exports.CachedDataSource = exports.WebsiteNoticeDataSource = exports.formatNotices = exports.filterNotices = exports.generateMessage = exports.displayNotices = exports.refreshNotices = void 0;
const https = require("https");
const path = require("path");
const fs = require("fs-extra");
const semver = require("semver");
const logging_1 = require("./logging");
const tree_1 = require("./tree");
const util_1 = require("./util");
const directories_1 = require("./util/directories");
const version_1 = require("./version");
const CACHE_FILE_PATH = path.join((0, directories_1.cdkCacheDir)(), 'notices.json');
async function refreshNotices() {
    const dataSource = dataSourceReference(false);
    return dataSource.fetch();
}
exports.refreshNotices = refreshNotices;
async function displayNotices(props) {
    const dataSource = dataSourceReference(props.ignoreCache ?? false);
    (0, logging_1.print)(await generateMessage(dataSource, props));
    return 0;
}
exports.displayNotices = displayNotices;
async function generateMessage(dataSource, props) {
    const data = await dataSource.fetch();
    const filteredNotices = filterNotices(data, {
        outdir: props.outdir,
        acknowledgedIssueNumbers: new Set(props.acknowledgedIssueNumbers),
    });
    if (filteredNotices.length > 0) {
        const individualMessages = formatNotices(filteredNotices);
        return finalMessage(individualMessages, filteredNotices[0].issueNumber);
    }
    return '';
}
exports.generateMessage = generateMessage;
function dataSourceReference(ignoreCache) {
    return new CachedDataSource(CACHE_FILE_PATH, new WebsiteNoticeDataSource(), ignoreCache);
}
function finalMessage(individualMessages, exampleNumber) {
    return [
        '\nNOTICES         (What\'s this? https://github.com/aws/aws-cdk/wiki/CLI-Notices)',
        ...individualMessages,
        `If you donâ€™t want to see a notice anymore, use "cdk acknowledge <id>". For example, "cdk acknowledge ${exampleNumber}".`,
    ].join('\n\n');
}
function filterNotices(data, options) {
    const filter = new NoticeFilter({
        cliVersion: options.cliVersion ?? (0, version_1.versionNumber)(),
        acknowledgedIssueNumbers: options.acknowledgedIssueNumbers ?? new Set(),
        tree: (0, tree_1.loadTreeFromDir)(options.outdir ?? 'cdk.out'),
    });
    return data.filter(notice => filter.apply(notice));
}
exports.filterNotices = filterNotices;
function formatNotices(data) {
    return data.map(formatNotice);
}
exports.formatNotices = formatNotices;
class WebsiteNoticeDataSource {
    fetch() {
        const timeout = 3000;
        return new Promise((resolve, reject) => {
            let req;
            let timer = setTimeout(() => {
                if (req) {
                    req.destroy(new Error('Request timed out'));
                }
            }, timeout);
            timer.unref();
            try {
                req = https.get('https://cli.cdk.dev-tools.aws.dev/notices.json', res => {
                    if (res.statusCode === 200) {
                        res.setEncoding('utf8');
                        let rawData = '';
                        res.on('data', (chunk) => {
                            rawData += chunk;
                        });
                        res.on('end', () => {
                            try {
                                const data = JSON.parse(rawData).notices;
                                if (!data) {
                                    throw new Error("'notices' key is missing");
                                }
                                (0, logging_1.debug)('Notices refreshed');
                                resolve(data ?? []);
                            }
                            catch (e) {
                                reject(new Error(`Failed to parse notices: ${e.message}`));
                            }
                        });
                        res.on('error', e => {
                            reject(new Error(`Failed to fetch notices: ${e.message}`));
                        });
                    }
                    else {
                        reject(new Error(`Failed to fetch notices. Status code: ${res.statusCode}`));
                    }
                });
                req.on('error', reject);
            }
            catch (e) {
                reject(new Error(`HTTPS 'get' call threw an error: ${e.message}`));
            }
        });
    }
}
exports.WebsiteNoticeDataSource = WebsiteNoticeDataSource;
const TIME_TO_LIVE_SUCCESS = 60 * 60 * 1000; // 1 hour
const TIME_TO_LIVE_ERROR = 1 * 60 * 1000; // 1 minute
class CachedDataSource {
    constructor(fileName, dataSource, skipCache) {
        this.fileName = fileName;
        this.dataSource = dataSource;
        this.skipCache = skipCache;
    }
    async fetch() {
        const cachedData = await this.load();
        const data = cachedData.notices;
        const expiration = cachedData.expiration ?? 0;
        if (Date.now() > expiration || this.skipCache) {
            const freshData = await this.fetchInner();
            await this.save(freshData);
            return freshData.notices;
        }
        else {
            (0, logging_1.debug)(`Reading cached notices from ${this.fileName}`);
            return data;
        }
    }
    async fetchInner() {
        try {
            return {
                expiration: Date.now() + TIME_TO_LIVE_SUCCESS,
                notices: await this.dataSource.fetch(),
            };
        }
        catch (e) {
            (0, logging_1.debug)(`Could not refresh notices: ${e}`);
            return {
                expiration: Date.now() + TIME_TO_LIVE_ERROR,
                notices: [],
            };
        }
    }
    async load() {
        const defaultValue = {
            expiration: 0,
            notices: [],
        };
        try {
            return fs.existsSync(this.fileName)
                ? await fs.readJSON(this.fileName)
                : defaultValue;
        }
        catch (e) {
            (0, logging_1.debug)(`Failed to load notices from cache: ${e}`);
            return defaultValue;
        }
    }
    async save(cached) {
        try {
            await fs.writeJSON(this.fileName, cached);
        }
        catch (e) {
            (0, logging_1.debug)(`Failed to store notices in the cache: ${e}`);
        }
    }
}
exports.CachedDataSource = CachedDataSource;
class NoticeFilter {
    constructor(props) {
        this.props = props;
        this.acknowledgedIssueNumbers = props.acknowledgedIssueNumbers;
    }
    /**
     * Returns true iff we should show this notice.
     */
    apply(notice) {
        if (this.acknowledgedIssueNumbers.has(notice.issueNumber)) {
            return false;
        }
        return this.applyVersion(notice, 'cli', this.props.cliVersion) ||
            match(resolveAliases(notice.components), this.props.tree);
    }
    /**
     * Returns true iff we should show the notice.
     */
    applyVersion(notice, name, compareToVersion) {
        if (compareToVersion === undefined) {
            return false;
        }
        const affectedComponent = notice.components.find(component => component.name === name);
        const affectedRange = affectedComponent?.version;
        return affectedRange != null && semver.satisfies(compareToVersion, affectedRange);
    }
}
exports.NoticeFilter = NoticeFilter;
/**
 * Some component names are aliases to actual component names. For example "framework"
 * is an alias for either the core library (v1) or the whole CDK library (v2).
 *
 * This function converts all aliases to their actual counterpart names, to be used to
 * match against the construct tree.
 *
 * @param components a list of components. Components whose name is an alias will be
 * transformed and all others will be left intact.
 */
function resolveAliases(components) {
    return (0, util_1.flatMap)(components, component => {
        if (component.name === 'framework') {
            return [{
                    name: '@aws-cdk/core.',
                    version: component.version,
                }, {
                    name: 'aws-cdk-lib.',
                    version: component.version,
                }];
        }
        else {
            return [component];
        }
    });
}
function formatNotice(notice) {
    const componentsValue = notice.components.map(c => `${c.name}: ${c.version}`).join(', ');
    return [
        `${notice.issueNumber}\t${notice.title}`,
        formatOverview(notice.overview),
        `\tAffected versions: ${componentsValue}`,
        `\tMore information at: https://github.com/aws/aws-cdk/issues/${notice.issueNumber}`,
    ].join('\n\n') + '\n';
}
function formatOverview(text) {
    const wrap = (s) => s.replace(/(?![^\n]{1,60}$)([^\n]{1,60})\s/g, '$1\n');
    const heading = 'Overview: ';
    const separator = `\n\t${' '.repeat(heading.length)}`;
    const content = wrap(text)
        .split('\n')
        .join(separator);
    return '\t' + heading + content;
}
/**
 * Whether any component in the tree matches any component in the query.
 * A match happens when:
 *
 * 1. The version of the node matches the version in the query, interpreted
 * as a semver range.
 *
 * 2. The name in the query is a prefix of the node name when the query ends in '.',
 * or the two names are exactly the same, otherwise.
 */
function match(query, tree) {
    return (0, tree_1.some)(tree, node => {
        return query.some(component => compareNames(component.name, node.constructInfo?.fqn) &&
            compareVersions(component.version, node.constructInfo?.version));
    });
    function compareNames(pattern, target) {
        if (target == null) {
            return false;
        }
        return pattern.endsWith('.') ? target.startsWith(pattern) : pattern === target;
    }
    function compareVersions(pattern, target) {
        return semver.satisfies(target ?? '', pattern);
    }
}
//# sourceMappingURL=data:application/json;base64,