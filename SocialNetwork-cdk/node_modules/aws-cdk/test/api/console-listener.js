"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stderr = exports.stdout = void 0;
/* eslint-disable import/order */
const events_1 = require("events");
class ConsoleListener {
    constructor(stream, options) {
        this._stream = stream;
        this._options = options;
    }
    inspect() {
        let isTTY;
        if (this._options && this._options.isTTY !== undefined) {
            isTTY = this._options.isTTY;
        }
        const output = [];
        const stream = this._stream;
        const res = new events_1.EventEmitter();
        const originalWrite = stream.write;
        stream.write = (string) => {
            output.push(string);
            return res.emit('data', string);
        };
        const originalIsTTY = stream.isTTY;
        if (isTTY === true) {
            stream.isTTY = isTTY;
        }
        res.output = output;
        res.restore = () => {
            stream.write = originalWrite;
            stream.isTTY = originalIsTTY;
        };
        return res;
    }
    inspectSync(fn) {
        const inspect = this.inspect();
        try {
            fn(inspect.output);
        }
        finally {
            inspect.restore();
        }
        return inspect.output;
    }
}
exports.stdout = new ConsoleListener(process.stdout);
exports.stderr = new ConsoleListener(process.stderr);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS1saXN0ZW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnNvbGUtbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWlDO0FBQ2pDLG1DQUFzQztBQWF0QyxNQUFNLGVBQWU7SUFJbkIsWUFBWSxNQUEwQixFQUFFLE9BQWlCO1FBQ3ZELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxLQUFLLENBQUM7UUFDVixJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDdkQsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQzlCLENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixNQUFNLEdBQUcsR0FBc0MsSUFBSSxxQkFBWSxFQUFFLENBQUM7UUFFbEUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNuQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUU7WUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQztRQUVGLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDbkMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDbkIsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDdkIsQ0FBQztRQUVELEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO1FBQy9CLENBQUMsQ0FBQztRQUNGLE9BQVEsR0FBaUIsQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVyxDQUFDLEVBQTRCO1FBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUM7WUFDSCxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JCLENBQUM7Z0JBQVMsQ0FBQztZQUNULE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQixDQUFDO1FBQ0QsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3hCLENBQUM7Q0FFRjtBQUVZLFFBQUEsTUFBTSxHQUFHLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QyxRQUFBLE1BQU0sR0FBRyxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvb3JkZXIgKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5cbmV4cG9ydCB0eXBlIE91dHB1dCA9IFJlYWRvbmx5QXJyYXk8c3RyaW5nPjtcblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcbiAgaXNUVFk/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluc3BlY3RvciB7XG4gIG91dHB1dDogT3V0cHV0O1xuICByZXN0b3JlOiAoKSA9PiB2b2lkO1xufVxuXG5jbGFzcyBDb25zb2xlTGlzdGVuZXIge1xuICBwcml2YXRlIF9zdHJlYW06IE5vZGVKUy5Xcml0ZVN0cmVhbTtcbiAgcHJpdmF0ZSBfb3B0aW9ucz86IE9wdGlvbnNcblxuICBjb25zdHJ1Y3RvcihzdHJlYW06IE5vZGVKUy5Xcml0ZVN0cmVhbSwgb3B0aW9ucz86IE9wdGlvbnMpIHtcbiAgICB0aGlzLl9zdHJlYW0gPSBzdHJlYW07XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBpbnNwZWN0KCk6IEluc3BlY3RvciB7XG4gICAgbGV0IGlzVFRZO1xuICAgIGlmICh0aGlzLl9vcHRpb25zICYmIHRoaXMuX29wdGlvbnMuaXNUVFkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaXNUVFkgPSB0aGlzLl9vcHRpb25zLmlzVFRZO1xuICAgIH1cblxuICAgIGNvbnN0IG91dHB1dDogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBzdHJlYW0gPSB0aGlzLl9zdHJlYW07XG4gICAgY29uc3QgcmVzOiBFdmVudEVtaXR0ZXIgJiBQYXJ0aWFsPEluc3BlY3Rvcj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdCBvcmlnaW5hbFdyaXRlID0gc3RyZWFtLndyaXRlO1xuICAgIHN0cmVhbS53cml0ZSA9IChzdHJpbmc6IHN0cmluZykgPT4ge1xuICAgICAgb3V0cHV0LnB1c2goc3RyaW5nKTtcbiAgICAgIHJldHVybiByZXMuZW1pdCgnZGF0YScsIHN0cmluZyk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9yaWdpbmFsSXNUVFkgPSBzdHJlYW0uaXNUVFk7XG4gICAgaWYgKGlzVFRZID09PSB0cnVlKSB7XG4gICAgICBzdHJlYW0uaXNUVFkgPSBpc1RUWTtcbiAgICB9XG5cbiAgICByZXMub3V0cHV0ID0gb3V0cHV0O1xuICAgIHJlcy5yZXN0b3JlID0gKCkgPT4ge1xuICAgICAgc3RyZWFtLndyaXRlID0gb3JpZ2luYWxXcml0ZTtcbiAgICAgIHN0cmVhbS5pc1RUWSA9IG9yaWdpbmFsSXNUVFk7XG4gICAgfTtcbiAgICByZXR1cm4gKHJlcyBhcyBJbnNwZWN0b3IpO1xuICB9XG5cbiAgaW5zcGVjdFN5bmMoZm46IChvdXRwdXQ6IE91dHB1dCkgPT4gdm9pZCk6IE91dHB1dCB7XG4gICAgY29uc3QgaW5zcGVjdCA9IHRoaXMuaW5zcGVjdCgpO1xuICAgIHRyeSB7XG4gICAgICBmbihpbnNwZWN0Lm91dHB1dCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGluc3BlY3QucmVzdG9yZSgpO1xuICAgIH1cbiAgICByZXR1cm4gaW5zcGVjdC5vdXRwdXQ7XG4gIH1cblxufVxuXG5leHBvcnQgY29uc3Qgc3Rkb3V0ID0gbmV3IENvbnNvbGVMaXN0ZW5lcihwcm9jZXNzLnN0ZG91dCk7XG5leHBvcnQgY29uc3Qgc3RkZXJyID0gbmV3IENvbnNvbGVMaXN0ZW5lcihwcm9jZXNzLnN0ZGVycik7XG4iXX0=