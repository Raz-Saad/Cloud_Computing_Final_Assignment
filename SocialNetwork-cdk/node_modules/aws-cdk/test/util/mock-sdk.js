"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorWithCode = exports.mockResolvedEnvironment = exports.mockToolkitInfo = exports.mockBootstrapStack = exports.MockSdk = exports.MockSdkProvider = void 0;
const AWS = require("aws-sdk");
const aws_auth_1 = require("../../lib/api/aws-auth");
const toolkit_info_1 = require("../../lib/api/toolkit-info");
const cloudformation_1 = require("../../lib/api/util/cloudformation");
const FAKE_CREDENTIALS = new AWS.Credentials({ accessKeyId: 'ACCESS', secretAccessKey: 'SECRET', sessionToken: 'TOKEN ' });
const FAKE_CREDENTIAL_CHAIN = new AWS.CredentialProviderChain([
    () => FAKE_CREDENTIALS,
]);
/**
 * An SDK that allows replacing (some of) the clients
 *
 * It's the responsibility of the consumer to replace all calls that
 * actually will be called.
 */
class MockSdkProvider extends aws_auth_1.SdkProvider {
    constructor(options = {}) {
        super(FAKE_CREDENTIAL_CHAIN, 'bermuda-triangle-1337', { customUserAgent: 'aws-cdk/jest' });
        // SDK contains a real SDK, since some test use 'AWS-mock' to replace the underlying
        // AWS calls which a real SDK would do, and some tests use the 'stub' functionality below.
        if (options.realSdk ?? true) {
            this.sdk = new aws_auth_1.SDK(FAKE_CREDENTIALS, this.defaultRegion, { customUserAgent: 'aws-cdk/jest' });
        }
        else {
            this.sdk = this._mockSdk = new MockSdk();
        }
    }
    get mockSdk() {
        if (!this._mockSdk) {
            throw new Error('MockSdkProvider was not created with \'realSdk: false\'');
        }
        return this._mockSdk;
    }
    async baseCredentialsPartition(_environment, _mode) {
        return undefined;
    }
    defaultAccount() {
        return Promise.resolve({ accountId: '123456789012', partition: 'aws' });
    }
    forEnvironment() {
        return Promise.resolve({ sdk: this.sdk, didAssumeRole: true });
    }
    /**
     * Replace the CloudFormation client with the given object
     */
    stubCloudFormation(stubs) {
        this.sdk.cloudFormation = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    /**
     * Replace the ECR client with the given object
     */
    stubEcr(stubs) {
        this.sdk.ecr = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    stubEcs(stubs, additionalProperties = {}) {
        this.sdk.ecs = jest.fn().mockReturnValue(partialAwsService(stubs, additionalProperties));
    }
    /**
     * Replace the S3 client with the given object
     */
    stubS3(stubs) {
        this.sdk.s3 = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    /**
     * Replace the STS client with the given object
     */
    stubSTS(stubs) {
        this.sdk.sts = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    /**
     * Replace the ELBv2 client with the given object
     */
    stubELBv2(stubs) {
        this.sdk.elbv2 = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    /**
     * Replace the SSM client with the given object
     */
    stubSSM(stubs) {
        this.sdk.ssm = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    stubLambda(stubs, additionalProperties = {}) {
        this.sdk.lambda = jest.fn().mockReturnValue(partialAwsService(stubs, additionalProperties));
    }
    stubIam(stubs, additionalProperties = {}) {
        this.sdk.iam = jest.fn().mockReturnValue(partialAwsService(stubs, additionalProperties));
    }
    stubStepFunctions(stubs) {
        this.sdk.stepFunctions = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    stubCodeBuild(stubs) {
        this.sdk.codeBuild = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    stubCloudWatchLogs(stubs) {
        this.sdk.cloudWatchLogs = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    stubAppSync(stubs) {
        this.sdk.appsync = jest.fn().mockReturnValue(partialAwsService(stubs));
    }
    stubGetEndpointSuffix(stub) {
        this.sdk.getEndpointSuffix = stub;
    }
}
exports.MockSdkProvider = MockSdkProvider;
class MockSdk {
    constructor() {
        this.currentRegion = 'bermuda-triangle-1337';
        this.lambda = jest.fn();
        this.iam = jest.fn();
        this.cloudFormation = jest.fn();
        this.ec2 = jest.fn();
        this.ssm = jest.fn();
        this.s3 = jest.fn();
        this.route53 = jest.fn();
        this.ecr = jest.fn();
        this.ecs = jest.fn();
        this.elbv2 = jest.fn();
        this.secretsManager = jest.fn();
        this.kms = jest.fn();
        this.stepFunctions = jest.fn();
        this.codeBuild = jest.fn();
        this.cloudWatchLogs = jest.fn();
        this.appsync = jest.fn();
        this.getEndpointSuffix = jest.fn();
        this.appendCustomUserAgent = jest.fn();
        this.removeCustomUserAgent = jest.fn();
    }
    currentAccount() {
        return Promise.resolve({ accountId: '123456789012', partition: 'aws' });
    }
    /**
     * Replace the CloudFormation client with the given object
     */
    stubCloudFormation(stubs) {
        this.cloudFormation.mockReturnValue(partialAwsService(stubs));
    }
    /**
     * Replace the CloudWatch client with the given object
     */
    stubCloudWatchLogs(stubs) {
        this.cloudWatchLogs.mockReturnValue(partialAwsService(stubs));
    }
    /**
     * Replace the AppSync client with the given object
     */
    stubAppSync(stubs) {
        this.appsync.mockReturnValue(partialAwsService(stubs));
    }
    /**
     * Replace the ECR client with the given object
     */
    stubEcr(stubs) {
        this.ecr.mockReturnValue(partialAwsService(stubs));
    }
    /**
     * Replace the SSM client with the given object
     */
    stubSsm(stubs) {
        this.ssm.mockReturnValue(partialAwsService(stubs));
    }
    /**
     * Replace the getEndpointSuffix client with the given object
     */
    stubGetEndpointSuffix(stub) {
        this.getEndpointSuffix.mockReturnValue(stub());
    }
}
exports.MockSdk = MockSdk;
/**
 * Wrap synchronous fake handlers so that they sort-of function like a real AWS client
 *
 * For example, turns an object like this:
 *
 * ```ts
 * {
 *   someCall(opts: AWS.Service.SomeCallInput): AWS.Service.SomeCallOutput {
 *     return {...whatever...};
 *   }
 * }
 * ```
 *
 * Into an object that in the type system pretends to be an 'AWS.Service'
 * class (even though it really isn't) and can be called like this:
 *
 * ```ts
 * const service = await sdk.someService(...);
 * const response = await service.someCall(...).promise();
 * ```
 *
 * We only implement the narrow subset of the AWS SDK API that the CDK actually
 * uses, and we cheat on the types to make TypeScript happy on the rest of the API.
 *
 * Most important feature of this class is that it will derive the input and output
 * types of the handlers on the input object from the ACTUAL AWS Service class,
 * so that you don't have to declare them.
 */
function partialAwsService(fns, additionalProperties = {}) {
    // Super unsafe in here because I don't know how to make TypeScript happy,
    // but at least the outer types make sure everything that happens in here works out.
    const ret = {};
    for (const [key, handler] of Object.entries(fns)) {
        ret[key] = (args) => new FakeAWSResponse(handler(args));
    }
    for (const [key, value] of Object.entries(additionalProperties)) {
        ret[key] = value;
    }
    return ret;
}
/**
 * Fake AWS response.
 *
 * We only ever 'await response.promise()' so that's the only thing we implement here.
 */
class FakeAWSResponse {
    constructor(x) {
        this.x = x;
    }
    promise() {
        return Promise.resolve(this.x);
    }
}
function mockBootstrapStack(sdk, stack) {
    return cloudformation_1.CloudFormationStack.fromStaticInformation((sdk ?? new MockSdk()).cloudFormation(), 'CDKToolkit', {
        CreationTime: new Date(),
        StackName: 'CDKToolkit',
        StackStatus: 'CREATE_COMPLETE',
        ...stack,
        Outputs: [
            { OutputKey: 'BucketName', OutputValue: 'BUCKET_NAME' },
            { OutputKey: 'BucketDomainName', OutputValue: 'BUCKET_ENDPOINT' },
            { OutputKey: 'BootstrapVersion', OutputValue: '1' },
            ...stack?.Outputs ?? [],
        ],
    });
}
exports.mockBootstrapStack = mockBootstrapStack;
function mockToolkitInfo(stack) {
    const sdk = new MockSdk();
    return toolkit_info_1.ToolkitInfo.fromStack(mockBootstrapStack(sdk, stack));
}
exports.mockToolkitInfo = mockToolkitInfo;
function mockResolvedEnvironment() {
    return {
        account: '123456789',
        region: 'bermuda-triangle-1337',
        name: 'aws://123456789/bermuda-triangle-1337',
    };
}
exports.mockResolvedEnvironment = mockResolvedEnvironment;
function errorWithCode(code, message) {
    const ret = new Error(message);
    ret.code = code;
    return ret;
}
exports.errorWithCode = errorWithCode;
//# sourceMappingURL=data:application/json;base64,