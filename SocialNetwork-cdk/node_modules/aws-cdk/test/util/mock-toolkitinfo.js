"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockToolkitInfo = void 0;
/* eslint-disable import/order */
const api_1 = require("../../lib/api");
class MockToolkitInfo extends api_1.ToolkitInfo {
    static setup(toolkitInfo) {
        toolkitInfo = toolkitInfo ?? new MockToolkitInfo();
        const orig = api_1.ToolkitInfo.lookup;
        api_1.ToolkitInfo.lookup = jest.fn().mockResolvedValue(toolkitInfo);
        return {
            toolkitInfo,
            dispose: () => {
                api_1.ToolkitInfo.lookup = orig;
            },
        };
    }
    constructor(props = {}) {
        super();
        this.found = true;
        this.stackName = 'MockBootstrapStack';
        this.bucketName = props.bucketName ?? 'MockToolkitBucketName';
        this.bucketUrl = props.bucketUrl ?? `https://${this.bucketName}.s3.amazonaws.com/`;
        this.version = props.version ?? 1;
        this.variant = api_1.DEFAULT_BOOTSTRAP_VARIANT;
        this._bootstrapStack = props.bootstrapStack;
    }
    get bootstrapStack() {
        if (!this._bootstrapStack) {
            throw new Error('Bootstrap stack object expected but not supplied to MockToolkitInfo');
        }
        return this._bootstrapStack;
    }
}
exports.MockToolkitInfo = MockToolkitInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay10b29sa2l0aW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vY2stdG9vbGtpdGluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWlDO0FBQ2pDLHVDQUF1RTtBQVV2RSxNQUFhLGVBQWdCLFNBQVEsaUJBQVc7SUFDdkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUF5QjtRQUMzQyxXQUFXLEdBQUcsV0FBVyxJQUFJLElBQUksZUFBZSxFQUFFLENBQUM7UUFDbkQsTUFBTSxJQUFJLEdBQUcsaUJBQVcsQ0FBQyxNQUFNLENBQUM7UUFDaEMsaUJBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTlELE9BQU87WUFDTCxXQUFXO1lBQ1gsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDWixpQkFBVyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDNUIsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBV0QsWUFBWSxRQUE4QixFQUFFO1FBQzFDLEtBQUssRUFBRSxDQUFDO1FBVk0sVUFBSyxHQUFHLElBQUksQ0FBQztRQUtiLGNBQVMsR0FBRyxvQkFBb0IsQ0FBQztRQU8vQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLElBQUksdUJBQXVCLENBQUM7UUFDOUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxJQUFJLFdBQVcsSUFBSSxDQUFDLFVBQVUsb0JBQW9CLENBQUM7UUFDbkYsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLCtCQUF5QixDQUFDO1FBQ3pDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBVyxjQUFjO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztDQUNGO0FBdkNELDBDQXVDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9vcmRlciAqL1xuaW1wb3J0IHsgVG9vbGtpdEluZm8sIERFRkFVTFRfQk9PVFNUUkFQX1ZBUklBTlQgfSBmcm9tICcuLi8uLi9saWIvYXBpJztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uU3RhY2sgfSBmcm9tICcuLi8uLi9saWIvYXBpL3V0aWwvY2xvdWRmb3JtYXRpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vY2tUb29sa2l0SW5mb1Byb3BzIHtcbiAgcmVhZG9ubHkgYnVja2V0TmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgYnVja2V0VXJsPzogc3RyaW5nO1xuICByZWFkb25seSB2ZXJzaW9uPzogbnVtYmVyO1xuICByZWFkb25seSBib290c3RyYXBTdGFjaz86IENsb3VkRm9ybWF0aW9uU3RhY2s7XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrVG9vbGtpdEluZm8gZXh0ZW5kcyBUb29sa2l0SW5mbyB7XG4gIHB1YmxpYyBzdGF0aWMgc2V0dXAodG9vbGtpdEluZm8/OiBUb29sa2l0SW5mbykge1xuICAgIHRvb2xraXRJbmZvID0gdG9vbGtpdEluZm8gPz8gbmV3IE1vY2tUb29sa2l0SW5mbygpO1xuICAgIGNvbnN0IG9yaWcgPSBUb29sa2l0SW5mby5sb29rdXA7XG4gICAgVG9vbGtpdEluZm8ubG9va3VwID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRvb2xraXRJbmZvKTtcblxuICAgIHJldHVybiB7XG4gICAgICB0b29sa2l0SW5mbyxcbiAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgVG9vbGtpdEluZm8ubG9va3VwID0gb3JpZztcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyByZWFkb25seSBmb3VuZCA9IHRydWU7XG4gIHB1YmxpYyByZWFkb25seSBidWNrZXRVcmw6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGJ1Y2tldE5hbWU6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHZlcnNpb246IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IHZhcmlhbnQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHN0YWNrTmFtZSA9ICdNb2NrQm9vdHN0cmFwU3RhY2snO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2Jvb3RzdHJhcFN0YWNrPzogQ2xvdWRGb3JtYXRpb25TdGFjaztcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogTW9ja1Rvb2xraXRJbmZvUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmJ1Y2tldE5hbWUgPSBwcm9wcy5idWNrZXROYW1lID8/ICdNb2NrVG9vbGtpdEJ1Y2tldE5hbWUnO1xuICAgIHRoaXMuYnVja2V0VXJsID0gcHJvcHMuYnVja2V0VXJsID8/IGBodHRwczovLyR7dGhpcy5idWNrZXROYW1lfS5zMy5hbWF6b25hd3MuY29tL2A7XG4gICAgdGhpcy52ZXJzaW9uID0gcHJvcHMudmVyc2lvbiA/PyAxO1xuICAgIHRoaXMudmFyaWFudCA9IERFRkFVTFRfQk9PVFNUUkFQX1ZBUklBTlQ7XG4gICAgdGhpcy5fYm9vdHN0cmFwU3RhY2sgPSBwcm9wcy5ib290c3RyYXBTdGFjaztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYm9vdHN0cmFwU3RhY2soKTogQ2xvdWRGb3JtYXRpb25TdGFjayB7XG4gICAgaWYgKCF0aGlzLl9ib290c3RyYXBTdGFjaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXAgc3RhY2sgb2JqZWN0IGV4cGVjdGVkIGJ1dCBub3Qgc3VwcGxpZWQgdG8gTW9ja1Rvb2xraXRJbmZvJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ib290c3RyYXBTdGFjaztcbiAgfVxufVxuIl19